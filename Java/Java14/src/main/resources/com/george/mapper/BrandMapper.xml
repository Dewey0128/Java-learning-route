<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    数据库表的字段名称  和  实体类的属性名称  不一样，则不能自动封装
        *  起别名
        *  sql片段
        *  resultMap
            1.定义<resultMap>标签
                id : 唯一标识
                type : 映射的类型，支持别名
            2.在<select>标签中，使用resultMap属性替换 resultType属性
-->

<mapper namespace="com.george.mapper.BrandMapper">
    <resultMap id="brandResult" type="brand">
        <result column="brand_name" property="brandName" />
        <result column="company_name" property="companyName" />
        <!--
           column : 数据库字段名
           property : 实体类变量名
       -->
    </resultMap>

    <!-- 添加语句  -->
    <insert id="add">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>
    <!-- 添加 主键返回 -->
    <insert id="add1" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <!-- 修改语句  -->
    <update id="updateById">
        update tb_brand set brand_name = #{brandName},
                            company_name = #{companyName},
                            ordered = #{ordered},
                            description = #{description},
                            status = #{status}
                        where id = #{id};
    </update>
    <!-- 修改  修改动态字段 -->
    <update id="updateId">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id};
    </update>
    <!-- 删除一个 -->
    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id};
    </delete>
    <!--  批量删除数据-->
    <delete id="deleteByIds">
        delete
        from tb_brand
        where id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
              /*
                collection	指定要迭代的集合类型，常见取值有：
                    1. list：当参数为List时
                    2. array：当参数为数组时
                    3. map：当参数为Map时，可通过item获取键或值
                    4. 自定义键名：当参数为@Param("ids") List ids时，使用ids
                item	迭代过程中每个元素的别名，用于在#{}中引用，如#{id}。
                separator	每次迭代之间的分隔符，常见如,（用于 SQL 的 IN 语句）。
                open	生成 SQL 片段的起始符号，如(（用于 IN 语句的左括号）。
                close	生成 SQL 片段的结束符号，如)（用于 IN 语句的右括号）。
            */
                #{id}
            </foreach>
    </delete>


    <select id="selectAll" resultMap="brandResult">
       select * from tb_brand;
    </select>


    <select id="searchByIdBrand" resultType="com.george.pojo.Brand">
        select * from tb_brand where id = #{id};
        <!--
            1.参数占位符：
                #{}：执行SQL时，会被#{}占位符替代为？，将来自动设置参数值
                ${}：拼SQL。会存在SQL注入问题
                使用时机：
                    参数传递，都使用 #{}
                    如果要对表名，列名进行动态设置，只能使用${}进行SQL拼接
            2.parameterType:
                用于设置参数类型，改参数可以省略这个字段
            3.SQL语句中特殊字符处理：
                使用转义字符
                <![CDATA[内容]]>
        -->
    </select>


    <select id="selectAllByStatusAndBrandNameAndCompanyName" resultMap="brandResult">
        select *
        from tb_brand
        where
            status = #{status}
            and company_name like #{companyName}
            and brand_name like #{brandName}
    </select>

    <select id="selectAllByStatusAndBrandNameAndBrandName2" resultMap="brandResult">
        select *
        from tb_brand
        where
            status = #{status}
            and company_name like #{companyName}
            and brand_name like #{brandName}
    </select>

    <!--
        动态条件查询：
            * if:条件判断
                * test : 逻辑表达式
            * 问题：
                * 恒等式 where 1 = 1
                * <where> 替换 where 关键词
    -->
    <select id="selectAllByStatusAndBrandNameAndBrandName3" resultMap="brandResult">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>
    <!--  动态单条件查询  -->
    <select id="selectByConditionSingle" resultMap="brandResult">
        select *
        from tb_brand
        <where>
            <choose>  <!-- 类似于Java的Switch -->
                <when test="status != null">  <!-- 类似于Java的Case -->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName}
                </when>
                <!--<otherwise>  &lt;!&ndash; 类似于Java的default &ndash;&gt;
                    1 = 1
                </otherwise>-->
            </choose>
        </where>
    </select>


</mapper>